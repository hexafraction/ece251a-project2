C51 COMPILER V9.53.0.0   MAIN                                                              04/10/2017 20:32:08 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\src/main.OBJ
COMPILER INVOKED BY: Z:\home\hexafraction\SimplicityStudio_v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe /home/hexa
                    -fraction/SimplicityStudio/v4_workspace/timerlib/src/main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOA
                    -TFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/home/hexafraction/SimplicityStudio_v4/d
                    -eveloper/sdks/8051/v4.0.3//Device/shared/si8051base;/home/hexafraction/SimplicityStudio_v4/developer/sdks/8051/v4.0.3//D
                    -evice/EFM8BB3/inc;/home/hexafraction/SimplicityStudio_v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd
                    -/inc;/home/hexafraction/SimplicityStudio_v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/graphics
                    -;/home/hexafraction/SimplicityStudio_v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;/home
                    -/hexafraction/SimplicityStudio_v4/developer/sdks/8051/v4.0.3//kits/common/bsp;/home/hexafraction/SimplicityStudio_v4/dev
                    -eloper/sdks/8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;/home/hexafraction/SimplicityStudio_v4/developer/sdks/8051/v4.0.
                    -3//Device/EFM8BB3/peripheral_driver/inc) PRINT(.\src/main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/main.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Includes
   3          //-----------------------------------------------------------------------------
   4          #include <SI_EFM8BB3_Register_Enums.h>                // SFR declarations
   5          #include <SI_EFM8BB3_Defs.h>
   6          #include "../src/timerlib.h"
   7          #include "../src/timer_countdown.h"
   8          #include "render.h"
*** WARNING C318 IN LINE 8 OF /home/hexafraction/SimplicityStudio_v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm
             -8_memory_lcd/inc/config\render_config.h: can't open file 'memory_lcd_config.h'
   9          #include "disp.h"
  10          //-----------------------------------------------------------------------------
  11          // main() Routine
  12          // ----------------------------------------------------------------------------
  13          //
  14          // Note: the software watchdog timer is not disabled by default in this
  15          // example, so a long-running program will reset periodically unless
  16          // the timer is disabled or your program periodically writes to it.
  17          //
  18          // Review the "Watchdog Timer" section under the part family's datasheet
  19          // for details. To find the datasheet, select your part in the
  20          // Simplicity Launcher and click on "Data Sheet".
  21          //
  22          //-----------------------------------------------------------------------------
  23          void init(void){
  24   1      
  25   1          uint8_t TMR3CN0_TR3_save;
  26   1               // $[P0 - Port 0 Pin Latch]
  27   1                // [P0 - Port 0 Pin Latch]$
  28   1      
  29   1                // $[P0MDOUT - Port 0 Output Mode]
  30   1                /*
  31   1                 // P0.0 output is open-drain
  32   1                 // P0.1 output is open-drain
  33   1                 // P0.2 output is open-drain
  34   1                 // P0.3 output is open-drain
  35   1                 // P0.4 output is open-drain
  36   1                 // P0.5 output is open-drain
  37   1                 // P0.6 output is push-pull
  38   1                 // P0.7 output is open-drain
  39   1                 */
  40   1                P0MDOUT = P0MDOUT_B0__OPEN_DRAIN
  41   1                          | P0MDOUT_B1__OPEN_DRAIN
  42   1                          | P0MDOUT_B2__OPEN_DRAIN
  43   1                          | P0MDOUT_B3__OPEN_DRAIN
  44   1                          | P0MDOUT_B4__OPEN_DRAIN
  45   1                          | P0MDOUT_B5__OPEN_DRAIN
C51 COMPILER V9.53.0.0   MAIN                                                              04/10/2017 20:32:08 PAGE 2   

  46   1                          | P0MDOUT_B6__PUSH_PULL
  47   1                          | P0MDOUT_B7__OPEN_DRAIN;
  48   1                // [P0MDOUT - Port 0 Output Mode]$
  49   1      
  50   1                // $[P0MDIN - Port 0 Input Mode]
  51   1                // [P0MDIN - Port 0 Input Mode]$
  52   1      
  53   1                // $[P0SKIP - Port 0 Skip]
  54   1                /*
  55   1                 // P0.0 pin is skipped by the crossbar
  56   1                 // P0.1 pin is skipped by the crossbar
  57   1                 // P0.2 pin is skipped by the crossbar
  58   1                 // P0.3 pin is skipped by the crossbar
  59   1                 // P0.4 pin is skipped by the crossbar
  60   1                 // P0.5 pin is skipped by the crossbar
  61   1                 // P0.6 pin is not skipped by the crossbar
  62   1                 // P0.7 pin is not skipped by the crossbar
  63   1                 */
  64   1                P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
  65   1                         | P0SKIP_B3__SKIPPED
  66   1                         | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
  67   1                         | P0SKIP_B6__NOT_SKIPPED
  68   1                         | P0SKIP_B7__NOT_SKIPPED;
  69   1                // [P0SKIP - Port 0 Skip]$
  70   1      
  71   1                // $[P0MASK - Port 0 Mask]
  72   1                // [P0MASK - Port 0 Mask]$
  73   1      
  74   1                // $[P0MAT - Port 0 Match]
  75   1              // [P0MAT - Port 0 Match]$
  76   1                // $[P1 - Port 1 Pin Latch]
  77   1                 // [P1 - Port 1 Pin Latch]$
  78   1      
  79   1                 // $[P1MDOUT - Port 1 Output Mode]
  80   1                 /*
  81   1                  // P1.0 output is push-pull
  82   1                  // P1.1 output is open-drain
  83   1                  // P1.2 output is open-drain
  84   1                  // P1.3 output is open-drain
  85   1                  // P1.4 output is push-pull
  86   1                  // P1.5 output is push-pull
  87   1                  // P1.6 output is push-pull
  88   1                  // P1.7 output is open-drain
  89   1                  */
  90   1                 P1MDOUT = P1MDOUT_B0__PUSH_PULL
  91   1                           | P1MDOUT_B1__OPEN_DRAIN
  92   1                           | P1MDOUT_B2__OPEN_DRAIN
  93   1                           | P1MDOUT_B3__OPEN_DRAIN
  94   1                           | P1MDOUT_B4__PUSH_PULL
  95   1                           | P1MDOUT_B5__PUSH_PULL
  96   1                           | P1MDOUT_B6__PUSH_PULL
  97   1                           | P1MDOUT_B7__OPEN_DRAIN;
  98   1                 // [P1MDOUT - Port 1 Output Mode]$
  99   1      
 100   1                 // $[P1MDIN - Port 1 Input Mode]
 101   1                 /*
 102   1                  // P1.0 pin is configured for digital mode
 103   1                  // P1.1 pin is configured for digital mode
 104   1                  // P1.2 pin is configured for digital mode
 105   1                  // P1.3 pin is configured for analog mode
 106   1                  // P1.4 pin is configured for digital mode
 107   1                  // P1.5 pin is configured for digital mode
 108   1                  // P1.6 pin is configured for digital mode
C51 COMPILER V9.53.0.0   MAIN                                                              04/10/2017 20:32:08 PAGE 3   

 109   1                  // P1.7 pin is configured for analog mode
 110   1                  */
 111   1                 P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__DIGITAL | P1MDIN_B2__DIGITAL
 112   1                          | P1MDIN_B3__ANALOG
 113   1                          | P1MDIN_B4__DIGITAL | P1MDIN_B5__DIGITAL
 114   1                          | P1MDIN_B6__DIGITAL
 115   1                          | P1MDIN_B7__ANALOG;
 116   1                 // [P1MDIN - Port 1 Input Mode]$
 117   1      
 118   1                 // $[P1SKIP - Port 1 Skip]
 119   1                 /*
 120   1                  // P1.0 pin is not skipped by the crossbar
 121   1                  // P1.1 pin is skipped by the crossbar
 122   1                  // P1.2 pin is skipped by the crossbar
 123   1                  // P1.3 pin is skipped by the crossbar
 124   1                  // P1.4 pin is not skipped by the crossbar
 125   1                  // P1.5 pin is not skipped by the crossbar
 126   1                  // P1.6 pin is not skipped by the crossbar
 127   1                  // P1.7 pin is skipped by the crossbar
 128   1                  */
 129   1                 P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 130   1                          | P1SKIP_B3__SKIPPED
 131   1                          | P1SKIP_B4__NOT_SKIPPED | P1SKIP_B5__NOT_SKIPPED
 132   1                          | P1SKIP_B6__NOT_SKIPPED
 133   1                          | P1SKIP_B7__SKIPPED;
 134   1                 // [P1SKIP - Port 1 Skip]$
 135   1      
 136   1                 // $[P1MASK - Port 1 Mask]
 137   1                 // [P1MASK - Port 1 Mask]$
 138   1      
 139   1                 // $[P1MAT - Port 1 Match]
 140   1                 // [P1MAT - Port 1 Match]$
 141   1      
 142   1                // $[XBR2 - Port I/O Crossbar 2]
 143   1      
 144   1                 // $[P2 - Port 2 Pin Latch]
 145   1                 // [P2 - Port 2 Pin Latch]$
 146   1      
 147   1                 // $[P2MDOUT - Port 2 Output Mode]
 148   1                 /*
 149   1                  // P2.0 output is open-drain
 150   1                  // P2.1 output is open-drain
 151   1                  // P2.2 output is open-drain
 152   1                  // P2.3 output is push-pull
 153   1                  // P2.4 output is open-drain
 154   1                  // P2.5 output is open-drain
 155   1                  // P2.6 output is push-pull
 156   1                  */
 157   1                 P2MDOUT = P2MDOUT_B0__OPEN_DRAIN
 158   1                           | P2MDOUT_B1__OPEN_DRAIN
 159   1                           | P2MDOUT_B2__OPEN_DRAIN
 160   1                           | P2MDOUT_B3__PUSH_PULL
 161   1                           | P2MDOUT_B4__OPEN_DRAIN
 162   1                           | P2MDOUT_B5__OPEN_DRAIN
 163   1                           | P2MDOUT_B6__PUSH_PULL;
 164   1                 // [P2MDOUT - Port 2 Output Mode]$
 165   1      
 166   1                 // $[P2MDIN - Port 2 Input Mode]
 167   1                 // [P2MDIN - Port 2 Input Mode]$
 168   1      
 169   1                 // $[P2SKIP - Port 2 Skip]
 170   1                 /*
 171   1                  // P2.0 pin is not skipped by the crossbar
C51 COMPILER V9.53.0.0   MAIN                                                              04/10/2017 20:32:08 PAGE 4   

 172   1                  // P2.1 pin is not skipped by the crossbar
 173   1                  // P2.2 pin is not skipped by the crossbar
 174   1                  // P2.3 pin is skipped by the crossbar
 175   1                  */
 176   1                 SFRPAGE = 0x20;
 177   1                 P2SKIP = P2SKIP_B0__NOT_SKIPPED
 178   1                          | P2SKIP_B1__NOT_SKIPPED
 179   1                          | P2SKIP_B2__NOT_SKIPPED
 180   1                          | P2SKIP_B3__SKIPPED;
 181   1                 // [P2SKIP - Port 2 Skip]$
 182   1      
 183   1                 // $[P2MASK - Port 2 Mask]
 184   1                 // [P2MASK - Port 2 Mask]$
 185   1      
 186   1                 // $[P2MAT - Port 2 Match]
 187   1               // [P2MAT - Port 2 Match]$
 188   1      
 189   1                 /*
 190   1                  // Weak Pullups enabled
 191   1                  // Crossbar enabled
 192   1                  // UART1 I/O unavailable at Port pin
 193   1                  // UART1 RTS1 unavailable at Port pin
 194   1                  // UART1 CTS1 unavailable at Port pin
 195   1                  */
 196   1                 SFRPAGE = 0x00;
 197   1                 XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED
 198   1                        | XBR2_XBARE__ENABLED
 199   1                        | XBR2_URT1E__DISABLED
 200   1                        | XBR2_URT1RTSE__DISABLED
 201   1                        | XBR2_URT1CTSE__DISABLED;
 202   1                 // [XBR2 - Port I/O Crossbar 2]$
 203   1      
 204   1                 // $[PRTDRV - Port Drive Strength]
 205   1                 // [PRTDRV - Port Drive Strength]$
 206   1      
 207   1                 // $[XBR0 - Port I/O Crossbar 0]
 208   1                 /*
 209   1                  // UART0 I/O unavailable at Port pin
 210   1                  // SPI I/O routed to Port pins. The SPI can be assigned either 3 or 4
 211   1                  //     GPIO pins
 212   1                  // SMBus 0 I/O unavailable at Port pins
 213   1                  // CP0 unavailable at Port pin
 214   1                  // Asynchronous CP0 unavailable at Port pin
 215   1                  // CP1 unavailable at Port pin
 216   1                  // Asynchronous CP1 unavailable at Port pin
 217   1                  // SYSCLK unavailable at Port pin
 218   1                  */
 219   1                 XBR0 = XBR0_URT0E__DISABLED | XBR0_SPI0E__ENABLED | XBR0_SMB0E__DISABLED
 220   1                        | XBR0_CP0E__DISABLED
 221   1                        | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 222   1                        | XBR0_CP1AE__DISABLED
 223   1                        | XBR0_SYSCKE__DISABLED;
 224   1                 // [XBR0 - Port I/O Crossbar 0]$
 225   1      
 226   1                 // $[XBR1 - Port I/O Crossbar 1]
 227   1                 /*
 228   1                  // CEX0, CEX1, CEX2 routed to Port pins
 229   1                  // ECI unavailable at Port pin
 230   1                  // T0 unavailable at Port pin
 231   1                  // T1 unavailable at Port pin
 232   1                  // T2 unavailable at Port pin
 233   1                  */
 234   1                 XBR1 = XBR1_PCA0ME__CEX0_TO_CEX2 | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
C51 COMPILER V9.53.0.0   MAIN                                                              04/10/2017 20:32:08 PAGE 5   

 235   1                        | XBR1_T1E__DISABLED
 236   1                        | XBR1_T2E__DISABLED;
 237   1                 // [XBR1 - Port I/O Crossbar 1]$
 238   1                 // $[HFOSC1 Setup]
 239   1                  // [HFOSC1 Setup]$
 240   1      
 241   1                  // $[CLKSEL - Clock Select]
 242   1                  /*
 243   1                   // Clock derived from the Internal High Frequency Oscillator 0
 244   1                   // SYSCLK is equal to selected clock source divided by 1
 245   1                   */
 246   1                  CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 247   1                  while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY){}
 248   1                    ;
 249   1                  // $[Timer Initialization]
 250   1                   // Save Timer Configuration
 251   1                   TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 252   1                   // Stop Timer
 253   1                   TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 254   1                   // [Timer Initialization]$
 255   1      
 256   1                   // $[TMR3CN1 - Timer 3 Control 1]
 257   1                   // [TMR3CN1 - Timer 3 Control 1]$
 258   1      
 259   1                   // $[TMR3CN0 - Timer 3 Control]
 260   1                   // [TMR3CN0 - Timer 3 Control]$
 261   1      
 262   1                   // $[TMR3H - Timer 3 High Byte]
 263   1                   /*
 264   1                    // Timer 3 High Byte = 0xF8
 265   1                    */
 266   1                   TMR3H = (0xF8 << TMR3H_TMR3H__SHIFT);
 267   1                   // [TMR3H - Timer 3 High Byte]$
 268   1      
 269   1                   // $[TMR3L - Timer 3 Low Byte]
 270   1                   /*
 271   1                    // Timer 3 Low Byte = 0x06
 272   1                    */
 273   1                   TMR3L = (0x06 << TMR3L_TMR3L__SHIFT);
 274   1                   // [TMR3L - Timer 3 Low Byte]$
 275   1      
 276   1                   // $[TMR3RLH - Timer 3 Reload High Byte]
 277   1                   /*
 278   1                    // Timer 3 Reload High Byte = 0xF8
 279   1                    */
 280   1                   TMR3RLH = (0xF8 << TMR3RLH_TMR3RLH__SHIFT);
 281   1                   // [TMR3RLH - Timer 3 Reload High Byte]$
 282   1      
 283   1                   // $[TMR3RLL - Timer 3 Reload Low Byte]
 284   1                   /*
 285   1                    // Timer 3 Reload Low Byte = 0x06
 286   1                    */
 287   1                   TMR3RLL = (0x06 << TMR3RLL_TMR3RLL__SHIFT);
 288   1                   // [TMR3RLL - Timer 3 Reload Low Byte]$
 289   1      
 290   1                   // $[TMR3CN0]
 291   1                   /*
 292   1                    // Start Timer 3 running
 293   1                    */
 294   1                   TMR3CN0 |= TMR3CN0_TR3__RUN;
 295   1                   // [TMR3CN0]$
 296   1      
 297   1                   // $[Timer Restoration]
C51 COMPILER V9.53.0.0   MAIN                                                              04/10/2017 20:32:08 PAGE 6   

 298   1                   // Restore Timer Configuration
 299   1                   TMR3CN0 |= TMR3CN0_TR3_save;
 300   1                   // [Timer Restoration]$
 301   1      
 302   1                // [CLKSEL - Clock Select]$
 303   1                   // $[PCA Off]
 304   1                    PCA0CN0_CR = PCA0CN0_CR__STOP;
 305   1                    // [PCA Off]$
 306   1      
 307   1                    // $[PCA0MD - PCA Mode]
 308   1                    // [PCA0MD - PCA Mode]$
 309   1      
 310   1                    // $[PCA0CENT - PCA Center Alignment Enable]
 311   1                    // [PCA0CENT - PCA Center Alignment Enable]$
 312   1      
 313   1                    // $[PCA0CLR - PCA Comparator Clear Control]
 314   1                    // [PCA0CLR - PCA Comparator Clear Control]$
 315   1      
 316   1                    // $[PCA0L - PCA Counter/Timer Low Byte]
 317   1                    // [PCA0L - PCA Counter/Timer Low Byte]$
 318   1      
 319   1                    // $[PCA0H - PCA Counter/Timer High Byte]
 320   1                    // [PCA0H - PCA Counter/Timer High Byte]$
 321   1      
 322   1                    // $[PCA0POL - PCA Output Polarity]
 323   1                    // [PCA0POL - PCA Output Polarity]$
 324   1      
 325   1                    // $[PCA0PWM - PCA PWM Configuration]
 326   1                    // [PCA0PWM - PCA PWM Configuration]$
 327   1      
 328   1                    // $[PCA On]
 329   1                    PCA0CN0_CR = PCA0CN0_CR__RUN;
 330   1                  // [PCA On]$
 331   1                    // $[PCA0 Settings Save]
 332   1                    // Select Capture/Compare register)
 333   1                    PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 334   1                    // [PCA0 Settings Save]$
 335   1      
 336   1                    // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 337   1                    /*
 338   1                     // Disable negative edge capture
 339   1                     // Disable CCF0 interrupts
 340   1                     // Enable match function
 341   1                     // 8 to 11-bit PWM selected
 342   1                     // Disable positive edge capture
 343   1                     // Enable comparator function
 344   1                     // Enable PWM function
 345   1                     // Disable toggle function
 346   1                     */
 347   1                    PCA0CPM0 = PCA0CPM0_CAPN__DISABLED
 348   1                               | PCA0CPM0_ECCF__DISABLED
 349   1                               | PCA0CPM0_MAT__ENABLED
 350   1                               | PCA0CPM0_PWM16__8_BIT
 351   1                               | PCA0CPM0_CAPP__DISABLED
 352   1                               | PCA0CPM0_ECOM__ENABLED
 353   1                               | PCA0CPM0_PWM__ENABLED
 354   1                               | PCA0CPM0_TOG__DISABLED;
 355   1                    // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 356   1      
 357   1                    // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 358   1                    // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 359   1      
 360   1                    // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
C51 COMPILER V9.53.0.0   MAIN                                                              04/10/2017 20:32:08 PAGE 7   

 361   1                    // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 362   1      
 363   1                    // $[Auto-reload]
 364   1                    // [Auto-reload]$
 365   1      
 366   1                    // $[PCA0 Settings Restore]
 367   1                  // [PCA0 Settings Restore]$
 368   1      
 369   1                    // $[SPI0CKR - SPI0 Clock Rate]
 370   1                     /*
 371   1                      // SPI0 Clock Rate = 0x0B
 372   1                      */
 373   1                     SPI0CKR = (0x0B << SPI0CKR_SPI0CKR__SHIFT);
 374   1                     // [SPI0CKR - SPI0 Clock Rate]$
 375   1      
 376   1                     // $[SPI0CFG - SPI0 Configuration]
 377   1                     /*
 378   1                      // Enable master mode. Operate as a master
 379   1                      */
 380   1                     SPI0CFG |= SPI0CFG_MSTEN__MASTER_ENABLED;
 381   1                     // [SPI0CFG - SPI0 Configuration]$
 382   1      
 383   1                     // $[SPI0PCF - SPI0 Pin Configuration]
 384   1                     // [SPI0PCF - SPI0 Pin Configuration]$
 385   1      
 386   1                     // $[SPI0CN0 - SPI0 Control]
 387   1                     /*
 388   1                      // Enable the SPI module
 389   1                      // 3-Wire Slave or 3-Wire Master Mode. NSS signal is not routed to a port
 390   1                      //     pin
 391   1                      */
 392   1                     SPI0CN0 &= ~SPI0CN0_NSSMD__FMASK;
 393   1                     SPI0CN0 |= SPI0CN0_SPIEN__ENABLED;
 394   1                     // [SPI0CN0 - SPI0 Control]$
 395   1      
 396   1                     // $[SPI0FCN0 - SPI0 FIFO Control 0]
 397   1                     // [SPI0FCN0 - SPI0 FIFO Control 0]$
 398   1      
 399   1                     // $[SPI0FCN1 - SPI0 FIFO Control 1]
 400   1                   // [SPI0FCN1 - SPI0 FIFO Control 1]$
 401   1                     // $[EIE1 - Extended Interrupt Enable 1]
 402   1                       /*
 403   1                        // Enable interrupt requests generated by the ADINT flag
 404   1                        // Disable ADC0 Window Comparison interrupt
 405   1                        // Disable CP0 interrupts
 406   1                        // Disable CP1 interrupts
 407   1                        // Disable all Port Match interrupts
 408   1                        // Disable all PCA0 interrupts
 409   1                        // Disable all SMB0 interrupts
 410   1                        // Enable interrupt requests generated by the TF3L or TF3H flags
 411   1                        */
 412   1                       EIE1 = EIE1_EADC0__ENABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 413   1                              | EIE1_ECP1__DISABLED
 414   1                              | EIE1_EMAT__DISABLED | EIE1_EPCA0__DISABLED
 415   1                              | EIE1_ESMB0__DISABLED
 416   1                              | EIE1_ET3__ENABLED;
 417   1                       // [EIE1 - Extended Interrupt Enable 1]$
 418   1      
 419   1                       // $[EIE2 - Extended Interrupt Enable 2]
 420   1                       // [EIE2 - Extended Interrupt Enable 2]$
 421   1      
 422   1                       // $[EIP1H - Extended Interrupt Priority 1 High]
 423   1                       // [EIP1H - Extended Interrupt Priority 1 High]$
C51 COMPILER V9.53.0.0   MAIN                                                              04/10/2017 20:32:08 PAGE 8   

 424   1      
 425   1                       // $[EIP1 - Extended Interrupt Priority 1 Low]
 426   1                       /*
 427   1                        // ADC0 Conversion Complete interrupt priority LSB set to high
 428   1                        // ADC0 Window interrupt priority LSB set to high
 429   1                        // CP0 interrupt priority LSB set to low
 430   1                        // CP1 interrupt priority LSB set to low
 431   1                        // Port Match interrupt priority LSB set to low
 432   1                        // PCA0 interrupt priority LSB set to low
 433   1                        // SMB0 interrupt priority LSB set to low
 434   1                        // Timer 3 interrupt priority LSB set to low
 435   1                        */
 436   1                       SFRPAGE = 0x10;
 437   1                       EIP1 = EIP1_PADC0__HIGH | EIP1_PWADC0__HIGH | EIP1_PCP0__LOW | EIP1_PCP1__LOW
 438   1                              | EIP1_PMAT__LOW
 439   1                              | EIP1_PPCA0__LOW | EIP1_PSMB0__LOW | EIP1_PT3__LOW;
 440   1                       // [EIP1 - Extended Interrupt Priority 1 Low]$
 441   1      
 442   1                       // $[EIP2 - Extended Interrupt Priority 2]
 443   1                       // [EIP2 - Extended Interrupt Priority 2]$
 444   1      
 445   1                       // $[EIP2H - Extended Interrupt Priority 2 High]
 446   1                       // [EIP2H - Extended Interrupt Priority 2 High]$
 447   1      
 448   1                       // $[IE - Interrupt Enable]
 449   1                       /*
 450   1                        // Disable all interrupt sources
 451   1                        // Disable external interrupt 0
 452   1                        // Disable external interrupt 1
 453   1                        // Enable interrupt requests generated by SPI0
 454   1                        // Disable all Timer 0 interrupt
 455   1                        // Disable all Timer 1 interrupt
 456   1                        // Enable interrupt requests generated by the TF2L or TF2H flags
 457   1                        // Disable UART0 interrupt
 458   1                        */
 459   1                       SFRPAGE = 0x00;
 460   1                       IE = IE_EA__DISABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__ENABLED
 461   1                            | IE_ET0__DISABLED
 462   1                            | IE_ET1__DISABLED | IE_ET2__ENABLED | IE_ES0__DISABLED;
 463   1                       // [IE - Interrupt Enable]$
 464   1      
 465   1                       // $[IP - Interrupt Priority]
 466   1                       // [IP - Interrupt Priority]$
 467   1      
 468   1                       // $[IPH - Interrupt Priority High]
 469   1                     // [IPH - Interrupt Priority High]$
 470   1      }
 471          
 472          
 473          
 474          int main (void)
 475          {
 476   1              static SI_SEGMENT_VARIABLE(line[16], uint8_t, RENDER_LINE_SEG);
 477   1              int y;
 478   1              int q;
 479   1              init();
 480   1      
 481   1              // timer 2 16 bit mode, 2MHz clock
 482   1      
 483   1              setupSysClock();
 484   1              TMR2CN0 = 2;
 485   1        // TODO still needs work
 486   1              //char SFRPAGE_SAVE = SFRPAGE;
C51 COMPILER V9.53.0.0   MAIN                                                              04/10/2017 20:32:08 PAGE 9   

 487   1              //SFRPAGE = 0x20;
 488   1              //      P3MDOUT = P3MDOUT_B0__OPEN_DRAIN | P3MDOUT_B1__PUSH_PULL
 489   1              //                      | P3MDOUT_B2__PUSH_PULL | P3MDOUT_B3__PUSH_PULL
 490   1              //                      | P3MDOUT_B4__PUSH_PULL | P3MDOUT_B7__OPEN_DRAIN;
 491   1              //      SFRPAGE = SFRPAGE_SAVE;
 492   1              P1_B6 = 0;
 493   1      
 494   1              XBR2 |= 0x40;
 495   1              P3_B4 = 1;
 496   1              P2_B6 = 1;
 497   1              P1_B5 = 0;
 498   1              IE_EA = 1;
 499   1              DISP_Init();
 500   1              //DISP_ClearAll();
 501   1      
 502   1              //setupTimer();
 503   1              disableWdt();
 504   1              //performCountdown();
 505   1              //startTimer();
 506   1              // P1 B5 and P1 B6 as well
 507   1              for (y = 0; y < FONT_HEIGHT; y++)
 508   1              {
 509   2      
 510   2                 RENDER_StrLine(line, 3, y, "TEST");
 511   2                 DISP_WriteLine(4+y, line);
 512   2              }
 513   1      
 514   1              P1_B4 = 0;
 515   1      
 516   1              P1_B6 = 1;
 517   1              P1_B5 = 1;
 518   1              while (1) {
 519   2                      for(q = 0; q < 5000; q++){
 520   3      
 521   3                      } P1_B4 = 1;
 522   2                      for(q = 0; q < 5000; q++){
 523   3      
 524   3                      }
 525   2              P1_B4 = 0;
 526   2              // Spin forever
 527   2              }
 528   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    229    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
   IDATA SIZE       =     16    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
