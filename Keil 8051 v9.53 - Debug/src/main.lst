C51 COMPILER V9.53.0.0   MAIN                                                              04/17/2017 19:57:11 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\src/main.OBJ
COMPILER INVOKED BY: Z:\Applications\Simplicity Studio.app\Contents\Eclipse\developer\toolchains\keil_8051\9.53\BIN\C51.
                    -exe /Users/rafi/Documents/Code/ECE-251-A/ece251a-project2/src/main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEV
                    -EL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/Applications/Simplicity Studi
                    -o.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//Device/shared/si8051base;/Applications/Simplicity Studio.app/Contents
                    -/Eclipse/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/s
                    -dks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/
                    -sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/graphics;/Applications/Simplicity Studio.app/Contents/Eclipse/
                    -developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;/Applications/Simplicity Studio.app/Contents/
                    -Eclipse/developer/sdks/8051/v4.0.3//kits/common/bsp;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/
                    -8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;/Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.
                    -0.3//Device/EFM8BB3/peripheral_driver/inc) PRINT(.\src/main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/main.OB
                    -J)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Includes
   3          //-----------------------------------------------------------------------------
   4          #include <stdio.h>
   5          #include <SI_EFM8BB3_Register_Enums.h>                // SFR declarations
   6          #include <SI_EFM8BB3_Defs.h>
   7          #include "../src/timerlib.h"
   8          #include "../src/timer_countdown.h"
   9          #include "render.h"
*** WARNING C318 IN LINE 8 OF /Applications/Simplicity Studio.app/Contents/Eclipse/developer/sdks/8051/v4.0.3//kits/comm
             -on/drivers/efm8_memory_lcd/inc/config\render_config.h: can't open file 'memory_lcd_config.h'
  10          #include "../lib/bsp/efm8_memory_lcd/inc/render-extended.h"
  11          #include "disp.h"
  12          //-----------------------------------------------------------------------------
  13          // main() Routine
  14          // ----------------------------------------------------------------------------
  15          //
  16          // Note: the software watchdog timer is not disabled by default in this
  17          // example, so a long-running program will reset periodically unless
  18          // the timer is disabled or your program periodically writes to it.
  19          //
  20          // Review the "Watchdog Timer" section under the part family's datasheet
  21          // for details. To find the datasheet, select your part in the
  22          // Simplicity Launcher and click on "Data Sheet".
  23          //
  24          //-----------------------------------------------------------------------------
  25          
  26          void init(void) {
  27   1      
  28   1              uint8_t TMR3CN0_TR3_save;
  29   1              // $[P0 - Port 0 Pin Latch]
  30   1              // [P0 - Port 0 Pin Latch]$
  31   1      
  32   1              // $[P0MDOUT - Port 0 Output Mode]
  33   1              /*
  34   1               // P0.0 output is open-drain
  35   1               // P0.1 output is open-drain
  36   1               // P0.2 output is open-drain
  37   1               // P0.3 output is open-drain
  38   1               // P0.4 output is open-drain
  39   1               // P0.5 output is open-drain
  40   1               // P0.6 output is push-pull
  41   1               // P0.7 output is open-drain
  42   1               */
  43   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
C51 COMPILER V9.53.0.0   MAIN                                                              04/17/2017 19:57:11 PAGE 2   

  44   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
  45   1                              | P0MDOUT_B4__OPEN_DRAIN | P0MDOUT_B5__OPEN_DRAIN
  46   1                              | P0MDOUT_B6__PUSH_PULL | P0MDOUT_B7__OPEN_DRAIN;
  47   1              // [P0MDOUT - Port 0 Output Mode]$
  48   1      
  49   1              // $[P0MDIN - Port 0 Input Mode]
  50   1              // [P0MDIN - Port 0 Input Mode]$
  51   1      
  52   1              // $[P0SKIP - Port 0 Skip]
  53   1              /*
  54   1               // P0.0 pin is skipped by the crossbar
  55   1               // P0.1 pin is skipped by the crossbar
  56   1               // P0.2 pin is skipped by the crossbar
  57   1               // P0.3 pin is skipped by the crossbar
  58   1               // P0.4 pin is skipped by the crossbar
  59   1               // P0.5 pin is skipped by the crossbar
  60   1               // P0.6 pin is not skipped by the crossbar
  61   1               // P0.7 pin is not skipped by the crossbar
  62   1               */
  63   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
  64   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
  65   1                              | P0SKIP_B6__NOT_SKIPPED | P0SKIP_B7__NOT_SKIPPED;
  66   1              // [P0SKIP - Port 0 Skip]$
  67   1      
  68   1              // $[P0MASK - Port 0 Mask]
  69   1              // [P0MASK - Port 0 Mask]$
  70   1      
  71   1              // $[P0MAT - Port 0 Match]
  72   1              // [P0MAT - Port 0 Match]$
  73   1              // $[P1 - Port 1 Pin Latch]
  74   1              P1 = P1_B4__LOW | P1_B5__LOW | P1_B6__LOW;
  75   1              // [P1 - Port 1 Pin Latch]$
  76   1      
  77   1              // $[P1MDOUT - Port 1 Output Mode]
  78   1              /*
  79   1               // P1.0 output is push-pull
  80   1               // P1.1 output is open-drain
  81   1               // P1.2 output is open-drain
  82   1               // P1.3 output is open-drain
  83   1               // P1.4 output is push-pull
  84   1               // P1.5 output is push-pull
  85   1               // P1.6 output is push-pull
  86   1               // P1.7 output is open-drain
  87   1               */
  88   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__OPEN_DRAIN
  89   1                              | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN
  90   1                              | P1MDOUT_B4__PUSH_PULL | P1MDOUT_B5__PUSH_PULL
  91   1                              | P1MDOUT_B6__PUSH_PULL | P1MDOUT_B7__OPEN_DRAIN;
  92   1              // [P1MDOUT - Port 1 Output Mode]$
  93   1      
  94   1              // $[P1MDIN - Port 1 Input Mode]
  95   1              /*
  96   1               // P1.0 pin is configured for digital mode
  97   1               // P1.1 pin is configured for digital mode
  98   1               // P1.2 pin is configured for digital mode
  99   1               // P1.3 pin is configured for analog mode
 100   1               // P1.4 pin is configured for digital mode
 101   1               // P1.5 pin is configured for digital mode
 102   1               // P1.6 pin is configured for digital mode
 103   1               // P1.7 pin is configured for analog mode
 104   1               */
 105   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__DIGITAL | P1MDIN_B2__DIGITAL
 106   1                              | P1MDIN_B3__ANALOG | P1MDIN_B4__DIGITAL | P1MDIN_B5__DIGITAL
C51 COMPILER V9.53.0.0   MAIN                                                              04/17/2017 19:57:11 PAGE 3   

 107   1                              | P1MDIN_B6__DIGITAL | P1MDIN_B7__ANALOG;
 108   1              // [P1MDIN - Port 1 Input Mode]$
 109   1      
 110   1              // $[P1SKIP - Port 1 Skip]
 111   1              /*
 112   1               // P1.0 pin is not skipped by the crossbar
 113   1               // P1.1 pin is skipped by the crossbar
 114   1               // P1.2 pin is skipped by the crossbar
 115   1               // P1.3 pin is skipped by the crossbar
 116   1               // P1.4 pin is skipped by the crossbar
 117   1               // P1.5 pin is skipped by the crossbar
 118   1               // P1.6 pin is skipped by the crossbar
 119   1               // P1.7 pin is skipped by the crossbar
 120   1               */
 121   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__SKIPPED | P1SKIP_B2__SKIPPED
 122   1                              | P1SKIP_B3__SKIPPED | P1SKIP_B4__SKIPPED | P1SKIP_B5__SKIPPED
 123   1                              | P1SKIP_B6__SKIPPED | P1SKIP_B7__SKIPPED;
 124   1              // [P1SKIP - Port 1 Skip]$
 125   1      
 126   1              // $[P1MASK - Port 1 Mask]
 127   1              // [P1MASK - Port 1 Mask]$
 128   1      
 129   1              // $[P1MAT - Port 1 Match]
 130   1              // [P1MAT - Port 1 Match]$
 131   1              P1MAT = P1MAT_B4__HIGH | P1MAT_B5__HIGH | P1MAT_B6__HIGH;
 132   1      
 133   1              // $[XBR2 - Port I/O Crossbar 2]
 134   1      
 135   1              // $[P2 - Port 2 Pin Latch]
 136   1              // [P2 - Port 2 Pin Latch]$
 137   1      
 138   1              // $[P2MDOUT - Port 2 Output Mode]
 139   1              /*
 140   1               // P2.0 output is open-drain
 141   1               // P2.1 output is open-drain
 142   1               // P2.2 output is open-drain
 143   1               // P2.3 output is push-pull
 144   1               // P2.4 output is open-drain
 145   1               // P2.5 output is open-drain
 146   1               // P2.6 output is push-pull
 147   1               */
 148   1              P2MDOUT = P2MDOUT_B0__OPEN_DRAIN | P2MDOUT_B1__OPEN_DRAIN
 149   1                              | P2MDOUT_B2__OPEN_DRAIN | P2MDOUT_B3__PUSH_PULL
 150   1                              | P2MDOUT_B4__OPEN_DRAIN | P2MDOUT_B5__OPEN_DRAIN
 151   1                              | P2MDOUT_B6__PUSH_PULL;
 152   1              // [P2MDOUT - Port 2 Output Mode]$
 153   1      
 154   1              // $[P2MDIN - Port 2 Input Mode]
 155   1              // [P2MDIN - Port 2 Input Mode]$
 156   1      
 157   1              // $[P2SKIP - Port 2 Skip]
 158   1              /*
 159   1               // P2.0 pin is not skipped by the crossbar
 160   1               // P2.1 pin is not skipped by the crossbar
 161   1               // P2.2 pin is not skipped by the crossbar
 162   1               // P2.3 pin is skipped by the crossbar
 163   1               */
 164   1              SFRPAGE = 0x20;
 165   1              P2SKIP = P2SKIP_B0__NOT_SKIPPED | P2SKIP_B1__NOT_SKIPPED
 166   1                              | P2SKIP_B2__NOT_SKIPPED | P2SKIP_B3__SKIPPED;
 167   1              // [P2SKIP - Port 2 Skip]$
 168   1      
 169   1              // $[P2MASK - Port 2 Mask]
C51 COMPILER V9.53.0.0   MAIN                                                              04/17/2017 19:57:11 PAGE 4   

 170   1              // [P2MASK - Port 2 Mask]$
 171   1      
 172   1              // $[P2MAT - Port 2 Match]
 173   1              // [P2MAT - Port 2 Match]$
 174   1      
 175   1              /*
 176   1               // Weak Pullups enabled
 177   1               // Crossbar enabled
 178   1               // UART1 I/O unavailable at Port pin
 179   1               // UART1 RTS1 unavailable at Port pin
 180   1               // UART1 CTS1 unavailable at Port pin
 181   1               */
 182   1              SFRPAGE = 0x00;
 183   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 184   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
 185   1                              | XBR2_URT1CTSE__DISABLED;
 186   1              // [XBR2 - Port I/O Crossbar 2]$
 187   1      
 188   1              // $[PRTDRV - Port Drive Strength]
 189   1              // [PRTDRV - Port Drive Strength]$
 190   1      
 191   1              // $[XBR0 - Port I/O Crossbar 0]
 192   1              /*
 193   1               // UART0 I/O unavailable at Port pin
 194   1               // SPI I/O routed to Port pins. The SPI can be assigned either 3 or 4
 195   1               //     GPIO pins
 196   1               // SMBus 0 I/O unavailable at Port pins
 197   1               // CP0 unavailable at Port pin
 198   1               // Asynchronous CP0 unavailable at Port pin
 199   1               // CP1 unavailable at Port pin
 200   1               // Asynchronous CP1 unavailable at Port pin
 201   1               // SYSCLK unavailable at Port pin
 202   1               */
 203   1              XBR0 = XBR0_URT0E__DISABLED | XBR0_SPI0E__ENABLED | XBR0_SMB0E__DISABLED
 204   1                              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 205   1                              | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 206   1              // [XBR0 - Port I/O Crossbar 0]$
 207   1      
 208   1              // $[XBR1 - Port I/O Crossbar 1]
 209   1              /*
 210   1               // CEX0, CEX1, CEX2 routed to Port pins
 211   1               // ECI unavailable at Port pin
 212   1               // T0 unavailable at Port pin
 213   1               // T1 unavailable at Port pin
 214   1               // T2 unavailable at Port pin
 215   1               */
 216   1              XBR1 = XBR1_PCA0ME__CEX0_TO_CEX2 | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
 217   1                              | XBR1_T1E__DISABLED | XBR1_T2E__DISABLED;
 218   1              // [XBR1 - Port I/O Crossbar 1]$
 219   1              // $[HFOSC1 Setup]
 220   1              // [HFOSC1 Setup]$
 221   1      
 222   1              // $[CLKSEL - Clock Select]
 223   1              /*
 224   1               // Clock derived from the Internal High Frequency Oscillator 0
 225   1               // SYSCLK is equal to selected clock source divided by 1
 226   1               */
 227   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 228   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY) {
 229   2              };
 230   1              // $[Timer Initialization]
 231   1              // Save Timer Configuration
 232   1              TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
C51 COMPILER V9.53.0.0   MAIN                                                              04/17/2017 19:57:11 PAGE 5   

 233   1              // Stop Timer
 234   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 235   1              // [Timer Initialization]$
 236   1      
 237   1              // $[TMR3CN1 - Timer 3 Control 1]
 238   1              // [TMR3CN1 - Timer 3 Control 1]$
 239   1      
 240   1              // $[TMR3CN0 - Timer 3 Control]
 241   1              // [TMR3CN0 - Timer 3 Control]$
 242   1      
 243   1              // $[TMR3H - Timer 3 High Byte]
 244   1              /*
 245   1               // Timer 3 High Byte = 0xF8
 246   1               */
 247   1              TMR3H = (0xF8 << TMR3H_TMR3H__SHIFT);
 248   1              // [TMR3H - Timer 3 High Byte]$
 249   1      
 250   1              // $[TMR3L - Timer 3 Low Byte]
 251   1              /*
 252   1               // Timer 3 Low Byte = 0x06
 253   1               */
 254   1              TMR3L = (0x06 << TMR3L_TMR3L__SHIFT);
 255   1              // [TMR3L - Timer 3 Low Byte]$
 256   1      
 257   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 258   1              /*
 259   1               // Timer 3 Reload High Byte = 0xF8
 260   1               */
 261   1              TMR3RLH = (0xF8 << TMR3RLH_TMR3RLH__SHIFT);
 262   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 263   1      
 264   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 265   1              /*
 266   1               // Timer 3 Reload Low Byte = 0x06
 267   1               */
 268   1              TMR3RLL = (0x06 << TMR3RLL_TMR3RLL__SHIFT);
 269   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 270   1      
 271   1              // $[TMR3CN0]
 272   1              /*
 273   1               // Start Timer 3 running
 274   1               */
 275   1              TMR3CN0 |= TMR3CN0_TR3__RUN;
 276   1              // [TMR3CN0]$
 277   1      
 278   1              // $[Timer Restoration]
 279   1              // Restore Timer Configuration
 280   1              TMR3CN0 |= TMR3CN0_TR3_save;
 281   1              // [Timer Restoration]$
 282   1      
 283   1              // [CLKSEL - Clock Select]$
 284   1              // $[PCA Off]
 285   1              PCA0CN0_CR = PCA0CN0_CR__STOP;
 286   1              // [PCA Off]$
 287   1      
 288   1              // $[PCA0MD - PCA Mode]
 289   1              // [PCA0MD - PCA Mode]$
 290   1      
 291   1              // $[PCA0CENT - PCA Center Alignment Enable]
 292   1              // [PCA0CENT - PCA Center Alignment Enable]$
 293   1      
 294   1              // $[PCA0CLR - PCA Comparator Clear Control]
 295   1              // [PCA0CLR - PCA Comparator Clear Control]$
C51 COMPILER V9.53.0.0   MAIN                                                              04/17/2017 19:57:11 PAGE 6   

 296   1      
 297   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 298   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 299   1      
 300   1              // $[PCA0H - PCA Counter/Timer High Byte]
 301   1              // [PCA0H - PCA Counter/Timer High Byte]$
 302   1      
 303   1              // $[PCA0POL - PCA Output Polarity]
 304   1              // [PCA0POL - PCA Output Polarity]$
 305   1      
 306   1              // $[PCA0PWM - PCA PWM Configuration]
 307   1              // [PCA0PWM - PCA PWM Configuration]$
 308   1      
 309   1              // $[PCA On]
 310   1              PCA0CN0_CR = PCA0CN0_CR__RUN;
 311   1              // [PCA On]$
 312   1              // $[PCA0 Settings Save]
 313   1              // Select Capture/Compare register)
 314   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 315   1              // [PCA0 Settings Save]$
 316   1      
 317   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 318   1              /*
 319   1               // Disable negative edge capture
 320   1               // Disable CCF0 interrupts
 321   1               // Enable match function
 322   1               // 8 to 11-bit PWM selected
 323   1               // Disable positive edge capture
 324   1               // Enable comparator function
 325   1               // Enable PWM function
 326   1               // Disable toggle function
 327   1               */
 328   1              PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__DISABLED
 329   1                              | PCA0CPM0_MAT__ENABLED | PCA0CPM0_PWM16__8_BIT
 330   1                              | PCA0CPM0_CAPP__DISABLED | PCA0CPM0_ECOM__ENABLED
 331   1                              | PCA0CPM0_PWM__ENABLED | PCA0CPM0_TOG__DISABLED;
 332   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 333   1      
 334   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 335   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 336   1      
 337   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 338   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 339   1      
 340   1              // $[Auto-reload]
 341   1              // [Auto-reload]$
 342   1      
 343   1              // $[PCA0 Settings Restore]
 344   1              // [PCA0 Settings Restore]$
 345   1      
 346   1              // $[SPI0CKR - SPI0 Clock Rate]
 347   1              /*
 348   1               // SPI0 Clock Rate = 0x0B
 349   1               */
 350   1              SPI0CKR = (0x0B << SPI0CKR_SPI0CKR__SHIFT);
 351   1              // [SPI0CKR - SPI0 Clock Rate]$
 352   1      
 353   1              // $[SPI0CFG - SPI0 Configuration]
 354   1              /*
 355   1               // Enable master mode. Operate as a master
 356   1               */
 357   1              SPI0CFG |= SPI0CFG_MSTEN__MASTER_ENABLED;
 358   1              // [SPI0CFG - SPI0 Configuration]$
C51 COMPILER V9.53.0.0   MAIN                                                              04/17/2017 19:57:11 PAGE 7   

 359   1      
 360   1              // $[SPI0PCF - SPI0 Pin Configuration]
 361   1              // [SPI0PCF - SPI0 Pin Configuration]$
 362   1      
 363   1              // $[SPI0CN0 - SPI0 Control]
 364   1              /*
 365   1               // Enable the SPI module
 366   1               // 3-Wire Slave or 3-Wire Master Mode. NSS signal is not routed to a port
 367   1               //     pin
 368   1               */
 369   1              SPI0CN0 &= ~SPI0CN0_NSSMD__FMASK;
 370   1              SPI0CN0 |= SPI0CN0_SPIEN__ENABLED;
 371   1              // [SPI0CN0 - SPI0 Control]$
 372   1      
 373   1              // $[SPI0FCN0 - SPI0 FIFO Control 0]
 374   1              // [SPI0FCN0 - SPI0 FIFO Control 0]$
 375   1      
 376   1              // $[SPI0FCN1 - SPI0 FIFO Control 1]
 377   1              // [SPI0FCN1 - SPI0 FIFO Control 1]$
 378   1              // $[EIE1 - Extended Interrupt Enable 1]
 379   1              /*
 380   1               // Enable interrupt requests generated by the ADINT flag
 381   1               // Disable ADC0 Window Comparison interrupt
 382   1               // Disable CP0 interrupts
 383   1               // Disable CP1 interrupts
 384   1               // Disable all Port Match interrupts
 385   1               // Disable all PCA0 interrupts
 386   1               // Disable all SMB0 interrupts
 387   1               // Enable interrupt requests generated by the TF3L or TF3H flags
 388   1               */
 389   1              EIE1 = EIE1_EADC0__ENABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 390   1                              | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__DISABLED
 391   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__ENABLED;
 392   1              // [EIE1 - Extended Interrupt Enable 1]$
 393   1      
 394   1              // $[EIE2 - Extended Interrupt Enable 2]
 395   1              // [EIE2 - Extended Interrupt Enable 2]$
 396   1      
 397   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 398   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 399   1      
 400   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 401   1              /*
 402   1               // ADC0 Conversion Complete interrupt priority LSB set to high
 403   1               // ADC0 Window interrupt priority LSB set to high
 404   1               // CP0 interrupt priority LSB set to low
 405   1               // CP1 interrupt priority LSB set to low
 406   1               // Port Match interrupt priority LSB set to low
 407   1               // PCA0 interrupt priority LSB set to low
 408   1               // SMB0 interrupt priority LSB set to low
 409   1               // Timer 3 interrupt priority LSB set to low
 410   1               */
 411   1              SFRPAGE = 0x10;
 412   1              EIP1 = EIP1_PADC0__HIGH | EIP1_PWADC0__HIGH | EIP1_PCP0__LOW
 413   1                              | EIP1_PCP1__LOW | EIP1_PMAT__LOW | EIP1_PPCA0__LOW
 414   1                              | EIP1_PSMB0__LOW | EIP1_PT3__LOW;
 415   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 416   1      
 417   1              // $[EIP2 - Extended Interrupt Priority 2]
 418   1              // [EIP2 - Extended Interrupt Priority 2]$
 419   1      
 420   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 421   1              // [EIP2H - Extended Interrupt Priority 2 High]$
C51 COMPILER V9.53.0.0   MAIN                                                              04/17/2017 19:57:11 PAGE 8   

 422   1      
 423   1              // $[IE - Interrupt Enable]
 424   1              /*
 425   1               // Disable all interrupt sources
 426   1               // Disable external interrupt 0
 427   1               // Disable external interrupt 1
 428   1               // Enable interrupt requests generated by SPI0
 429   1               // Disable all Timer 0 interrupt
 430   1               // Disable all Timer 1 interrupt
 431   1               // Enable interrupt requests generated by the TF2L or TF2H flags
 432   1               // Disable UART0 interrupt
 433   1               */
 434   1              SFRPAGE = 0x00;
 435   1              IE = IE_EA__DISABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 436   1                              | IE_ESPI0__ENABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 437   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
 438   1              // [IE - Interrupt Enable]$
 439   1      
 440   1              // $[IP - Interrupt Priority]
 441   1              // [IP - Interrupt Priority]$
 442   1      
 443   1              // $[IPH - Interrupt Priority High]
 444   1              // [IPH - Interrupt Priority High]$
 445   1      }
 446          
 447          int main(void) {
 448   1              bool lP0B2;
 449   1              bool lP0B3;
 450   1              char str[13];
 451   1              int lap1;
 452   1              int lap2;
 453   1              int lap3;
 454   1              uint8_t timerStatus = 0;
 455   1              init();
 456   1              setupSysClock();
 457   1              TMR2CN0 = 2;
 458   1              IE_EA = 1;
 459   1              DISP_Init();
 460   1              renderAndWriteCenteredText(46, 1, "Stopwatch Timer");
 461   1              renderAndWriteCenteredText(64, 0, "Andrey Akhmetov");
 462   1              renderAndWriteCenteredText(74, 0, "Rafi Mueen");
 463   1              performCountdown();
 464   1              DISP_ClearAll();
 465   1              setupTimer();
 466   1              disableWdt();
 467   1              renderAndWriteCenteredText(5, 1, "Stopwatch Timer");
 468   1              renderAndWriteHorizontalLine(12, 115, 25);
 469   1              renderAndWriteHorizontalLine(12, 115, 53);
 470   1              renderAndWriteCenteredText(60, 0, "Lap                                          Time");
 471   1              lap1 = 0;
 472   1              lap2 = 0;
 473   1              lap3 = 0;
 474   1              while (1) {
 475   2                      int timeInMilli = (int) getElapsedMillis();
 476   2                      sprintf(str, "%02d:%02d:%02d.%d", timeInHours(timeInMilli),
 477   2                                      timeInMinutes(timeInMilli), timeInSeconds(timeInMilli),
 478   2                                      timeInMilliseconds(timeInMilli));
 479   2                      renderAndWriteCenteredText(35, 0, str);
 480   2                      sprintf(str, "1:        %02d:%02d:%02d.%d", timeInHours(lap1),
 481   2                                      timeInMinutes(lap1), timeInSeconds(lap1),
 482   2                                      timeInMilliseconds(lap1));
 483   2                      renderAndWriteCenteredText(75, 0, str);
 484   2                      sprintf(str, "2:        %02d:%02d:%02d.%d", timeInHours(lap2),
C51 COMPILER V9.53.0.0   MAIN                                                              04/17/2017 19:57:11 PAGE 9   

 485   2                                      timeInMinutes(lap2), timeInSeconds(lap2),
 486   2                                      timeInMilliseconds(lap2));
 487   2                      renderAndWriteCenteredText(90, 0, str);
 488   2                      sprintf(str, "3:        %02d:%02d:%02d.%d", timeInHours(lap3),
 489   2                                      timeInMinutes(lap3), timeInSeconds(lap3),
 490   2                                      timeInMilliseconds(lap3));
 491   2                      renderAndWriteCenteredText(105, 0, str);
 492   2                      //P1_B4 = timeInSeconds(timeInMilli) % 2;
 493   2                      //P1_B5 = timeInSeconds(timeInMilli) % 2;
 494   2                      if (!P0_B2) {
 495   3                              if (!lP0B2) {
 496   4                                      if (timerStatus == 0) {
 497   5                                              start();
 498   5                                              timerStatus = 1;
 499   5                                      } else {
 500   5                                              stopTimer();
 501   5                                              timerStatus = 0;
 502   5                                      }
 503   4                              }
 504   3                              lP0B2 = true;
 505   3                      } else if (!P0_B3) {
 506   3      
 507   3                              lP0B2 = false;
 508   3                              if (!lP0B3) {
 509   4                                      if (!timerStatus) {
 510   5                                              resetTimer();
 511   5                                              lap1 = 0;
 512   5                                              lap2 = 0;
 513   5                                              lap3 = 0;
 514   5                                      } else {
 515   5                                              if (!lap1) {
 516   6                                                      lap1 = timeInMilli;
 517   6                                              } else if (!lap2) {
 518   6                                                      lap2 = timeInMilli;
 519   6                                              } else if (!lap3) {
 520   6                                                      lap3 = timeInMilli;
 521   6                                              } else {
 522   6                                                      renderAndWriteCenteredText(120, 0, "FPGAs are better");
 523   6                                              }
 524   5                                      }
 525   4                              }
 526   3                              lP0B3 = true;
 527   3                      } else {
 528   3                              lP0B2 = false;
 529   3                              lP0B3 = false;
 530   3                      }
 531   2                      // Spin forever
 532   2              }
 533   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    712    ----
   CONSTANT SIZE    =    155    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.53.0.0   MAIN                                                              04/17/2017 19:57:11 PAGE 10  

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
