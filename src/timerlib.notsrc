; /home/hexafraction/SimplicityStudio/v4_workspace/timerlib/src/timerlib.SRC generated from: /home/hexafraction/SimplicityStudio/v4_workspace/timerlib/src/timerlib.c
; COMPILER INVOKED BY:
;        Z:\home\hexafraction\SimplicityStudio_v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe /home/hexafraction/SimplicityStudio/v4_workspace/timerlib/src/timerlib.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/home/hexafraction/SimplicityStudio_v4/developer/sdks/8051/v4.0.3//Device/shared/si8051base;/home/hexafraction/SimplicityStudio_v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src/timerlib.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/timerlib.OBJ)

$NOMOD51

NAME	TIMERLIB

SPI0CKR	DATA	0A2H
P0	DATA	080H
SCON1_PERR	BIT	0C8H.6
PSW_OV	BIT	0D0H.2
XOSC0CN	DATA	086H
P1	DATA	090H
SPI0CN0_TXNF	BIT	0F8H.1
WDTCN	DATA	097H
P2	DATA	0A0H
P3	DATA	0B0H
SMB0CN0_MASTER	BIT	0C0H.7
PCA0	DATA	0F9H
EIE1	DATA	0E6H
SMB0CN0_ACK	BIT	0C0H.1
CLIF0_C0RIF	BIT	0E8H.1
EIE2	DATA	0F3H
CLIF0_C1RIF	BIT	0E8H.3
CLIF0_C2RIF	BIT	0E8H.5
PSCTL	DATA	08FH
CLIF0_C3RIF	BIT	0E8H.7
IT01CF	DATA	0E4H
SMB0CN0_TXMODE	BIT	0C0H.6
DERIVID	DATA	0ADH
SFRPAGE	DATA	0A7H
P0MDOUT	DATA	0A4H
P1MDOUT	DATA	0A5H
ADC0CN0_ADINT	BIT	0E8H.5
TMR2RLH	DATA	0CBH
P2MDOUT	DATA	0A6H
IE	DATA	0A8H
TMR3RLH	DATA	093H
P3MDOUT	DATA	09CH
TMR4RLH	DATA	0A3H
EIP1	DATA	0BBH
TMR5RLH	DATA	0D3H
EIP2	DATA	0EDH
SCON0_RB8	BIT	098H.2
TMR2RLL	DATA	0CAH
PCA0CPH0	DATA	0FCH
TMR3RLL	DATA	092H
PCA0CPH1	DATA	0EAH
SCON0_TB8	BIT	098H.3
B_B0	BIT	0F0H.0
DP	DATA	082H
TMR4RLL	DATA	0A2H
PCA0CPH2	DATA	0ECH
B_B1	BIT	0F0H.1
ADC0GT	DATA	0C3H
TMR5RLL	DATA	0D2H
PCA0CPH3	DATA	0F5H
I2C0SLAD	DATA	0BDH
UART1FCN1_RFRQ	BIT	0D8H.3
B_B2	BIT	0F0H.2
SFRPGCN	DATA	0BCH
PCA0CPL0	DATA	0FBH
PCA0CPH4	DATA	085H
B_B3	BIT	0F0H.3
PCA0MD	DATA	0D9H
PCA0CPM0	DATA	0DAH
PCA0CPL1	DATA	0E9H
PCA0CPH5	DATA	0DEH
UART1FCN1_TFRQ	BIT	0D8H.7
B_B4	BIT	0F0H.4
PCA0CPM1	DATA	0DBH
PCA0CPL2	DATA	0EBH
ADC0ASCF	DATA	0A1H
ADC0ASAH	DATA	0B6H
B_B5	BIT	0F0H.5
ADC0CN0_IPOEN	BIT	0E8H.6
ADC0CN0_TEMPE	BIT	0E8H.0
PCA0CPM2	DATA	0DCH
PCA0CPL3	DATA	0F4H
IP	DATA	0B8H
B_B6	BIT	0F0H.6
ADC0LT	DATA	0C5H
PCA0CPM3	DATA	0AEH
PCA0CPL4	DATA	084H
UART1FCN1_TXNF	BIT	0D8H.6
SCON0_MCE	BIT	098H.5
B_B7	BIT	0F0H.7
PCA0CPM4	DATA	0AFH
PCA0CPL5	DATA	0DDH
SMB0FCN0	DATA	0C3H
PCA0CPM5	DATA	0CCH
ADC0ASAL	DATA	0B5H
XBR0	DATA	0E1H
SMB0FCN1	DATA	0C4H
SMB0CF	DATA	0C1H
XBR1	DATA	0E2H
PFE0CN	DATA	0C1H
EMI0CN	DATA	0E7H
SMB0CN0_STA	BIT	0C0H.5
XBR2	DATA	0E3H
CLU0CF	DATA	0B1H
ADC0MX	DATA	0BBH
ACC_ACC0	BIT	0E0H.0
REF0CN	DATA	0D1H
CLU1CF	DATA	0B3H
CKCON0	DATA	08EH
ACC_ACC1	BIT	0E0H.1
REG0CN	DATA	0C9H
CRC0IN	DATA	0CAH
CLU2CF	DATA	0B6H
CKCON1	DATA	0A6H
TMR2CN0_TR2	BIT	0C8H.2
ACC_ACC2	BIT	0E0H.2
CLU3CF	DATA	0BFH
ACC_ACC3	BIT	0E0H.3
SP	DATA	081H
CMP0MD	DATA	09DH
ACC_ACC4	BIT	0E0H.4
LFO0CN	DATA	0B1H
CMP1MD	DATA	0ABH
PCA0CN0_CCF0	BIT	0D8H.0
ACC_ACC5	BIT	0E0H.5
TMR4CN0_TR4	BIT	098H.2
PCA0CN0_CCF1	BIT	0D8H.1
ACC_ACC6	BIT	0E0H.6
TMR2	DATA	0CEH
SPI0FCN0	DATA	09AH
ADC0ASCT	DATA	0C7H
PCA0CN0_CCF2	BIT	0D8H.2
ACC_ACC7	BIT	0E0H.7
TMR3	DATA	094H
SPI0FCN1	DATA	09BH
TMR5CN0_TR5	BIT	0C0H.2
PCA0CN0_CCF3	BIT	0D8H.3
TMR4	DATA	0A4H
SBCON1	DATA	094H
PCA0CN0_CCF4	BIT	0D8H.4
TMR5	DATA	0D4H
SMB0CN0_ACKRQ	BIT	0C0H.3
PCA0CN0_CCF5	BIT	0D8H.5
VDM0CN	DATA	0FFH
P0MDIN	DATA	0F1H
CLU0FN	DATA	0AFH
SCON0_REN	BIT	098H.4
SMB0TC	DATA	0ACH
P1MDIN	DATA	0F2H
CLU1FN	DATA	0B2H
SCON1_REN	BIT	0C8H.4
P2MDIN	DATA	0F3H
CLU2FN	DATA	0B5H
SMB0CN0_STO	BIT	0C0H.4
P3MDIN	DATA	0F4H
I2C0STAT	DATA	0B9H
I2C0DOUT	DATA	0BBH
CLU3FN	DATA	0BEH
SBRLH1	DATA	096H
P0MASK	DATA	0FEH
UART1FCN1_TXHOLD	BIT	0D8H.5
P1MASK	DATA	0EEH
P2MASK	DATA	0FCH
PSW_RS0	BIT	0D0H.3
PCA0CN0_CF	BIT	0D8H.7
PCA0CENT	DATA	09EH
I2C0CN0	DATA	0BAH
CRC0ST	DATA	0D2H
SPI0CN0_RXOVRN	BIT	0F8H.4
PSW_RS1	BIT	0D0H.4
SBRLL1	DATA	095H
SCON1_RBX	BIT	0C8H.2
DAC0CF0	DATA	091H
ADC0CF0	DATA	0BCH
TMR2CN0_T2XCLK0	BIT	0C8H.0
DAC1CF0	DATA	093H
DAC0CF1	DATA	092H
ADC0CF1	DATA	0B9H
TMR2CN0_T2XCLK1	BIT	0C8H.1
SCON1_TBX	BIT	0C8H.3
ADC0CN0_ADEN	BIT	0E8H.7
TMOD	DATA	089H
TCON	DATA	088H
DAC2CF0	DATA	095H
DAC1CF1	DATA	094H
ADC0CF2	DATA	0DFH
DAC3CF0	DATA	09AH
DAC2CF1	DATA	096H
CRC0FLIP	DATA	0CFH
PSW_PARITY	BIT	0D0H.0
IE_ES0	BIT	0A8H.4
DAC3CF1	DATA	09CH
CMP0MX	DATA	09FH
TMR4CN0_T4XCLK0	BIT	098H.0
IE_ET0	BIT	0A8H.1
CMP1MX	DATA	0AAH
TMR4CN0_T4XCLK1	BIT	098H.1
IE_ET1	BIT	0A8H.3
P0SKIP	DATA	0D4H
CLOUT0	DATA	0D1H
UART1FCN1_RIE	BIT	0D8H.0
TMR5CN0_T5XCLK0	BIT	0C0H.0
IE_ET2	BIT	0A8H.5
DACGCF0_D1SRC0	BIT	088H.0
P1SKIP	DATA	0D5H
TMR5CN0_T5XCLK1	BIT	0C0H.1
DACGCF0_D1SRC1	BIT	088H.1
P2SKIP	DATA	0CCH
CLU0MX	DATA	084H
ADC0CN0	DATA	0E8H
UART1FCN1_TIE	BIT	0D8H.4
IE_EX0	BIT	0A8H.0
DACGCF0_D3SRC0	BIT	088H.4
CLU1MX	DATA	085H
ADC0CN1	DATA	0B2H
PCA0CN0_CR	BIT	0D8H.6
IE_EX1	BIT	0A8H.2
DACGCF0_D3SRC1	BIT	088H.5
CLU2MX	DATA	091H
ADC0CN2	DATA	0B3H
SCON1_OVR	BIT	0C8H.7
PSTAT0	DATA	0AAH
CLU3MX	DATA	0AEH
SCON0_SMODE	BIT	098H.7
DEVICEID	DATA	0B5H
CLKSEL	DATA	0A9H
SPI0CN0_SPIEN	BIT	0F8H.0
DAC0H	DATA	085H
B	DATA	0F0H
ADC0H	DATA	0BEH
I2C0ADM	DATA	0FFH
DAC1H	DATA	08AH
DACGCF0_D1AMEN	BIT	088H.2
DAC2H	DATA	08CH
DAC3H	DATA	08EH
DACGCF0_D3AMEN	BIT	088H.6
TMR2RL	DATA	0CAH
DAC0L	DATA	084H
ADC0L	DATA	0BDH
TMR3RL	DATA	092H
DAC1L	DATA	089H
TMR4RL	DATA	0A2H
PCA0CN0	DATA	0D8H
DAC2L	DATA	08BH
ACC	DATA	0E0H
TMR5RL	DATA	0D2H
UART0PCF	DATA	0D9H
DAC3L	DATA	08DH
PCA0CP0	DATA	0FBH
UART1PCF	DATA	0DAH
PCA0CP1	DATA	0E9H
DACGCF0	DATA	088H
PCA0CP2	DATA	0EBH
I2C0DIN	DATA	0BCH
DACGCF1	DATA	098H
CRC0CN0	DATA	0CEH
PCA0CP3	DATA	0F4H
TH0	DATA	08CH
DACGCF2	DATA	0A2H
CRC0CN1	DATA	086H
IP_PS0	BIT	0B8H.4
PCA0CP4	DATA	084H
UART1FCT	DATA	0FAH
TH1	DATA	08DH
PCA0H	DATA	0FAH
I2C0FCT	DATA	0F5H
IP_PT0	BIT	0B8H.1
PCA0CP5	DATA	0DDH
CLIE0	DATA	0C7H
IP_PT1	BIT	0B8H.3
DACGCF0_D01REFSL	BIT	088H.3
ADC0ASA	DATA	0B5H
CLIF0	DATA	0E8H
SMB0CN0_ARBLOST	BIT	0C0H.2
IP_PT2	BIT	0B8H.5
TL0	DATA	08AH
PSW_F0	BIT	0D0H.5
IE_ESPI0	BIT	0A8H.6
TL1	DATA	08BH
PCA0L	DATA	0F9H
SMB0CN0_SI	BIT	0C0H.0
PSW_F1	BIT	0D0H.1
P0_B0	BIT	080H.0
IP_PX0	BIT	0B8H.0
P1_B0	BIT	090H.0
P0_B1	BIT	080H.1
IP_PX1	BIT	0B8H.2
DACGCF0_D23REFSL	BIT	088H.7
UART1LIN	DATA	09EH
CMP0CN0	DATA	09BH
CLEN0	DATA	0C6H
TCON_IE0	BIT	088H.1
P2_B0	BIT	0A0H.0
P1_B1	BIT	090H.1
P0_B2	BIT	080H.2
CMP1CN0	DATA	0BFH
CMP0CN1	DATA	099H
TCON_IE1	BIT	088H.3
P3_B0	BIT	0B0H.0
P2_B1	BIT	0A0H.1
P1_B2	BIT	090H.2
P0_B3	BIT	080H.3
SMB0CN0	DATA	0C0H
CMP1CN1	DATA	0ACH
P3_B1	BIT	0B0H.1
P2_B2	BIT	0A0H.2
P1_B3	BIT	090H.3
P0_B4	BIT	080H.4
P3_B2	BIT	0B0H.2
P2_B3	BIT	0A0H.3
P1_B4	BIT	090H.4
P0_B5	BIT	080H.5
DACGCF1_D0UDIS	BIT	098H.0
UART1FCN1_RXTO0	BIT	0D8H.1
P3_B3	BIT	0B0H.3
P2_B4	BIT	0A0H.4
P1_B5	BIT	090H.5
P0_B6	BIT	080H.6
DACGCF1_D1UDIS	BIT	098H.1
EIP1H	DATA	0EEH
UART1FCN1_RXTO1	BIT	0D8H.2
P3_B4	BIT	0B0H.4
P2_B5	BIT	0A0H.5
P1_B6	BIT	090H.6
P0_B7	BIT	080H.7
DACGCF1_D2UDIS	BIT	098H.2
SMB0RXLN	DATA	0C5H
EIP2H	DATA	0F6H
P2_B6	BIT	0A0H.6
P1_B7	BIT	090H.7
DACGCF1_D3UDIS	BIT	098H.3
P3_B7	BIT	0B0H.7
DPH	DATA	083H
ADC0GTH	DATA	0C4H
TMR2CN0_TF2H	BIT	0C8H.7
TMR2CN0_T2SPLIT	BIT	0C8H.3
PSW_AC	BIT	0D0H.6
SPI0CN0	DATA	0F8H
HFO0CAL	DATA	0C7H
TCON_TF0	BIT	088H.5
SCON0_RI	BIT	098H.0
HFO1CAL	DATA	0D6H
DPL	DATA	082H
TCON_TF1	BIT	088H.7
SCON1_RI	BIT	0C8H.0
SBUF0	DATA	099H
PCON0	DATA	087H
IPH	DATA	0F2H
ADC0GTL	DATA	0C3H
TMR4CN0_TF4H	BIT	098H.7
TMR4CN0_T4SPLIT	BIT	098H.3
TMR2CN0_TF2L	BIT	0C8H.6
SCON0_TI	BIT	098H.1
SBUF1	DATA	092H
PCON1	DATA	0CDH
ADC0LTH	DATA	0C6H
TCON_IT0	BIT	088H.0
SCON1_TI	BIT	0C8H.1
RSTSRC	DATA	0EFH
P0MAT	DATA	0FDH
CRC0DAT	DATA	0CBH
TMR5CN0_TF5H	BIT	0C0H.7
TMR5CN0_T5SPLIT	BIT	0C0H.3
TCON_IT1	BIT	088H.2
SFRSTACK	DATA	0D7H
SCON0	DATA	098H
PRTDRV	DATA	0F6H
P1MAT	DATA	0EDH
ADC0CN0_ADWINT	BIT	0E8H.3
SMOD1	DATA	093H
SCON1	DATA	0C8H
P2MAT	DATA	0FBH
TMR4CN0_TF4L	BIT	098H.6
ADC0CN0_ADBUSY	BIT	0E8H.4
SMB0ADM	DATA	0D6H
ADC0LTL	DATA	0C5H
SPI0CN0_MODF	BIT	0F8H.5
IP_PSPI0	BIT	0B8H.6
ADC0CN0_ADGN0	BIT	0E8H.1
PCA0CLR	DATA	09CH
TMR5CN0_TF5L	BIT	0C0H.6
ADC0CN0_ADGN1	BIT	0E8H.2
TMR2CN0	DATA	0C8H
TMR3CN0	DATA	091H
TMR2CN1	DATA	0FDH
TMR4CN0	DATA	098H
TMR3CN1	DATA	0FEH
TMR5CN0	DATA	0C0H
TMR4CN1	DATA	0FFH
SMB0ADR	DATA	0D7H
TCON_TR0	BIT	088H.4
TMR5CN1	DATA	0F1H
TMR2CN0_TF2CEN	BIT	0C8H.4
TCON_TR1	BIT	088H.6
SMB0DAT	DATA	0C2H
TMR2H	DATA	0CFH
SPI0CFG	DATA	0A1H
TMR3H	DATA	095H
HFOCN	DATA	0EFH
CRC0CNT	DATA	0D3H
TMR4H	DATA	0A5H
TMR4CN0_TF4CEN	BIT	098H.4
TMR5H	DATA	0D5H
SMB0FCT	DATA	0EFH
PCA0POL	DATA	096H
TMR2L	DATA	0CEH
TMR5CN0_TF5CEN	BIT	0C0H.4
SPI0CN0_SPIF	BIT	0F8H.7
TMR3L	DATA	094H
IE_EA	BIT	0A8H.7
TMR4L	DATA	0A4H
TMR5L	DATA	0D4H
TMR2CN0_TF2LEN	BIT	0C8H.5
SPI0CN0_WCOL	BIT	0F8H.6
SPI0CN0_NSSMD0	BIT	0F8H.2
PSW_CY	BIT	0D0H.7
UART1FCN0	DATA	09DH
SPI0PCF	DATA	0DFH
SPI0DAT	DATA	0A3H
I2C0FCN0	DATA	0ADH
SPI0CN0_NSSMD1	BIT	0F8H.3
ADC0	DATA	0BDH
UART1FCN1	DATA	0D8H
I2C0FCN1	DATA	0ABH
CLIF0_C0FIF	BIT	0E8H.0
TMR4CN0_TF4LEN	BIT	098H.5
CLIF0_C1FIF	BIT	0E8H.2
PSW	DATA	0D0H
PCA0PWM	DATA	0F7H
CLIF0_C2FIF	BIT	0E8H.4
SPI0FCT	DATA	0F7H
REVID	DATA	0B6H
TMR5CN0_TF5LEN	BIT	0C0H.5
CLIF0_C3FIF	BIT	0E8H.6
FLKEY	DATA	0B7H
?PR?setupSysClock?TIMERLIB               SEGMENT CODE 
?PR?setupTimer?TIMERLIB                  SEGMENT CODE 
?PR?getElapsedMillis?TIMERLIB            SEGMENT CODE 
?PR?tearDownTimer?TIMERLIB               SEGMENT CODE 
?PR?resetTimer?TIMERLIB                  SEGMENT CODE 
?BI?resetTimer?TIMERLIB                  SEGMENT BIT OVERLAYABLE
?PR?startTimer?TIMERLIB                  SEGMENT CODE 
?PR?stopTimer?TIMERLIB                   SEGMENT CODE 
?PR?TIMERLIB_TICK?TIMERLIB               SEGMENT CODE 
?C_INITSEG           SEGMENT CODE 
?DT?TIMERLIB         SEGMENT DATA 
?BI?TIMERLIB         SEGMENT BIT 
	PUBLIC	reset_low
	PUBLIC	timerEnabled
	PUBLIC	millisElapsed
	PUBLIC	TCON_SAVE
	PUBLIC	TMOD_SAVE
	PUBLIC	reset_high
	PUBLIC	TIMERLIB_TICK
	PUBLIC	stopTimer
	PUBLIC	startTimer
	PUBLIC	resetTimer
	PUBLIC	tearDownTimer
	PUBLIC	getElapsedMillis
	PUBLIC	setupTimer
	PUBLIC	setupSysClock

	RSEG  ?BI?resetTimer?TIMERLIB
?resetTimer?BIT:
   ET0_SAVE?440:   DBIT   1

	RSEG  ?DT?TIMERLIB
     reset_high:   DS   2
      TMOD_SAVE:   DS   1
      TCON_SAVE:   DS   1
  millisElapsed:   DS   4
      reset_low:   DS   2

	RSEG  ?BI?TIMERLIB
   timerEnabled:   DBIT   1

	RSEG  ?C_INITSEG
	DB	0C1H, timerEnabled + 000H	; bit-init

	DB	004H
	DB	millisElapsed
	DB	000H,000H,000H,000H	; long

	DB	002H
	DB	reset_low
	DW	00000H

	DB	002H
	DB	reset_high
	DW	00000H

; /*
;  * timerlib.c
;  *
;  *  Created on: Apr 7, 2017
;  *      Author: hexafraction
;  */
; #pragma src
; #include <SI_EFM8BB3_Register_Enums.h>
; #include <SI_EFM8BB3_Defs.h>
; volatile bool timerEnabled = false;
; volatile long millisElapsed = 0;
; volatile int reset_low = 0;
; volatile int reset_high = 0;
; 
; unsigned char TCON_SAVE;
; unsigned char TMOD_SAVE;
; 
; // puts system into 24.5MHz/32 clock
; void setupSysClock(){

	RSEG  ?PR?setupSysClock?TIMERLIB
setupSysClock:
	USING	0
			; SOURCE LINE # 19
; 	CLKSEL = 0x50; // 0b01010000, meaning reset divider ready flag, divide by 32, source is HFOSC0 (24.5MHz)
			; SOURCE LINE # 20
	MOV  	CLKSEL,#050H
; 	// actual system clock ends up being 765.625kHz
; 	reset_low = 255-254; // 766%256
			; SOURCE LINE # 22
	MOV  	reset_low,#00H
	MOV  	reset_low+01H,#01H
; 	reset_high = 255-3; // 766/256, trunc
			; SOURCE LINE # 23
	MOV  	reset_high,#00H
	MOV  	reset_high+01H,#0FCH
; }
			; SOURCE LINE # 24
	RET  	
; END OF setupSysClock

; 
; // overwrites state of timer 0
; #pragma disable // we probably don't want interrupts happening in the middle of all this
; void setupTimer(){

	RSEG  ?PR?setupTimer?TIMERLIB
setupTimer:
	SETB 	C
	JBC  	EA,?C0011
	CLR  	C
?C0011:
	PUSH 	PSW
	USING	0
			; SOURCE LINE # 28
; 	setupSysClock();
			; SOURCE LINE # 29
	LCALL	setupSysClock
; 	TCON_SAVE = TCON;
			; SOURCE LINE # 30
	MOV  	TCON_SAVE,TCON
; 	TMOD_SAVE = TMOD;
			; SOURCE LINE # 31
	MOV  	TMOD_SAVE,TMOD
; 	TCON = (TMOD & 0xCC); // keep timer 1 setting, zero all timer 0 bits (disabling and clearing its interrupt flags)
			; SOURCE LINE # 32
	MOV  	A,TMOD
	ANL  	A,#0CCH
	MOV  	TCON,A
; 	TMOD = (TMOD & 0xF0) | (0x01); // keep timer 1 mode setting, set timer 1 to disable gate, TIMER mode, and mode 1.
			; SOURCE LINE # 33
	MOV  	A,TMOD
	ANL  	A,#0F0H
	ORL  	A,#01H
	MOV  	TMOD,A
; 	millisElapsed = 0;
			; SOURCE LINE # 34
	CLR  	A
	MOV  	millisElapsed+03H,A
	MOV  	millisElapsed+02H,A
	MOV  	millisElapsed+01H,A
	MOV  	millisElapsed,A
; 	timerEnabled = false;
			; SOURCE LINE # 35
	CLR  	timerEnabled
; 	IE_ET0 = 0; // don't enable interrupts just yet
			; SOURCE LINE # 36
	CLR  	IE_ET0
; }
			; SOURCE LINE # 37
	POP  	PSW
	MOV  	EA,C
	RET  	
; END OF setupTimer

; 
; // disable interrupts since we don't know whether writing to a 32-bit volatile integer is atomic
; #pragma disable
; long getElapsedMillis(){

	RSEG  ?PR?getElapsedMillis?TIMERLIB
getElapsedMillis:
	SETB 	C
	JBC  	EA,?C0012
	CLR  	C
?C0012:
	PUSH 	PSW
	USING	0
			; SOURCE LINE # 41
; 	return millisElapsed;
			; SOURCE LINE # 42
	MOV  	R7,millisElapsed+03H
	MOV  	R6,millisElapsed+02H
	MOV  	R5,millisElapsed+01H
	MOV  	R4,millisElapsed
; }
			; SOURCE LINE # 43
?C0003:
	POP  	PSW
	MOV  	EA,C
	RET  	
; END OF getElapsedMillis

; 
; // disable the internal flag we use to track consistency, and restore the original TCON and TMOD registers.
; void tearDownTimer(){

	RSEG  ?PR?tearDownTimer?TIMERLIB
tearDownTimer:
	USING	0
			; SOURCE LINE # 46
; 	timerEnabled = false;
			; SOURCE LINE # 47
	CLR  	timerEnabled
; 	TCON = TCON_SAVE;
			; SOURCE LINE # 48
	MOV  	TCON,TCON_SAVE
; 	TMOD = TMOD_SAVE;
			; SOURCE LINE # 49
	MOV  	TMOD,TMOD_SAVE
; }
			; SOURCE LINE # 50
	RET  	
; END OF tearDownTimer

; 
; 
; void resetTimer(){

	RSEG  ?PR?resetTimer?TIMERLIB
resetTimer:
	USING	0
			; SOURCE LINE # 53
; 	bit ET0_SAVE = IE_ET0; // save interrupt control state...
			; SOURCE LINE # 54
	MOV  	C,IE_ET0
	MOV  	ET0_SAVE?440,C
; 	IE_ET0 = 0; // ... and stop the timer.
			; SOURCE LINE # 55
	CLR  	IE_ET0
; 	TL0 = reset_low; // reset the timer's internal count
			; SOURCE LINE # 56
	MOV  	TL0,reset_low+01H
; 	TH0 = reset_high;
			; SOURCE LINE # 57
	MOV  	TH0,reset_high+01H
; 	IE_ET0 = ET0_SAVE; // and restart it if it was started.
			; SOURCE LINE # 58
	MOV  	C,ET0_SAVE?440
	MOV  	IE_ET0,C
; 	millisElapsed = 0; // and reset our count
			; SOURCE LINE # 59
	CLR  	A
	MOV  	millisElapsed+03H,A
	MOV  	millisElapsed+02H,A
	MOV  	millisElapsed+01H,A
	MOV  	millisElapsed,A
; }
			; SOURCE LINE # 60
	RET  	
; END OF resetTimer

; 
; // enable the run flag, and the interrupt.
; void startTimer(){

	RSEG  ?PR?startTimer?TIMERLIB
startTimer:
	USING	0
			; SOURCE LINE # 63
; 	timerEnabled = true;
			; SOURCE LINE # 64
	SETB 	timerEnabled
; 	IE_ET0 = 1;
			; SOURCE LINE # 65
	SETB 	IE_ET0
; 	TCON_TR0 = 1;
			; SOURCE LINE # 66
	SETB 	TCON_TR0
; }
			; SOURCE LINE # 67
	RET  	
; END OF startTimer

; 
; // disable the run flag and the interrupt.
; void stopTimer(){

	RSEG  ?PR?stopTimer?TIMERLIB
stopTimer:
	USING	0
			; SOURCE LINE # 70
; 	timerEnabled = false;
			; SOURCE LINE # 71
	CLR  	timerEnabled
; 	IE_ET0 = 0;
			; SOURCE LINE # 72
	CLR  	IE_ET0
; 	TCON_TR0 = 0;
			; SOURCE LINE # 73
	CLR  	TCON_TR0
; }
			; SOURCE LINE # 74
	RET  	
; END OF stopTimer

CSEG	AT	0000BH
	LJMP	TIMERLIB_TICK

; 
; // the ISR itself.
; SI_INTERRUPT (TIMERLIB_TICK, TIMER0_IRQn) {

	RSEG  ?PR?TIMERLIB_TICK?TIMERLIB
	USING	0
TIMERLIB_TICK:
	PUSH 	ACC
	PUSH 	PSW
	USING	0
			; SOURCE LINE # 77
; 	if(!timerEnabled) return;
			; SOURCE LINE # 78
	JB   	timerEnabled,?C0008
	SJMP 	?C0009
?C0008:
; 	else {
			; SOURCE LINE # 79
; 		millisElapsed = millisElapsed + 1;
			; SOURCE LINE # 80
	MOV  	A,millisElapsed+03H
	ADD  	A,#01H
	MOV  	millisElapsed+03H,A
	CLR  	A
	ADDC 	A,millisElapsed+02H
	MOV  	millisElapsed+02H,A
	CLR  	A
	ADDC 	A,millisElapsed+01H
	MOV  	millisElapsed+01H,A
	CLR  	A
	ADDC 	A,millisElapsed
	MOV  	millisElapsed,A
; 		TH0 = reset_high;
			; SOURCE LINE # 81
	MOV  	TH0,reset_high+01H
; 		TL0 = reset_low;
			; SOURCE LINE # 82
	MOV  	TL0,reset_low+01H
; 	}
			; SOURCE LINE # 83
; }
			; SOURCE LINE # 84
?C0009:
	POP  	PSW
	POP  	ACC
	RETI 	
; END OF TIMERLIB_TICK

	END
